<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConnectionStringInformation" xml:space="preserve">
    <value>Connection string: {0}</value>
  </data>
  <data name="CopyrightInformation" xml:space="preserve">
    <value>octalforty Wizardby {0} Alpha 1
Copyright (c) 2009 octalforty studios</value>
  </data>
  <data name="CouldNotFindDatabaseWdi" xml:space="preserve">
    <value>Could not find 'database.wdi' in '{0}'.</value>
  </data>
  <data name="CouldNotResolvePlatformAlias" xml:space="preserve">
    <value>Could not resolve Platform Alias '{0}'.</value>
  </data>
  <data name="CurrentDatabaseVersionInfo" xml:space="preserve">
    <value>Current database version: {0}</value>
  </data>
  <data name="DatabaseIsNotVersioned" xml:space="preserve">
    <value>Database is not versioned or no migrations were applied yet.</value>
  </data>
  <data name="EnvironmentInformation" xml:space="preserve">
    <value>Environment: {0}</value>
  </data>
  <data name="GeneratedFile" xml:space="preserve">
    <value>Generated '{0}'.</value>
  </data>
  <data name="GeneratedVersion" xml:space="preserve">
    <value>Generated version {0:yyyyMMddHHmmss}.</value>
  </data>
  <data name="MdlTemplate" xml:space="preserve">
    <value>migration "{0}" revision =&gt; 1:
    defaults:
        default-primary-key ID type =&gt; Int32, primary-key =&gt; true, nullable =&gt; false

    version {1:yyyyMMddHHmmss}:
        /* Start writing migrations */</value>
  </data>
  <data name="MigrationDefinitionInformation" xml:space="preserve">
    <value>Migration Definition: {0}</value>
  </data>
  <data name="NoMigrationDefinition" xml:space="preserve">
    <value>No Migration Definition found in '{0}'.</value>
  </data>
  <data name="RegisteredDatabaseVersionInfo" xml:space="preserve">
    <value>    {0}</value>
  </data>
  <data name="RegisteredDatabaseVersionsInfo" xml:space="preserve">
    <value>Registered versions:</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unknown command '{0}'.</value>
  </data>
  <data name="UsageInformation" xml:space="preserve">
    <value>Usage: 
    wizardby &lt;command&gt; &lt;version-or-step&gt; [/mdl:&lt;mdl-file&gt;] 
        [/connection:&lt;connection-string&gt;] [/platform:&lt;platform-alias&gt;] 
        [/environment:&lt;environment-name&gt;]
				
    /mdl or /m          - Specifies the name of a MDL file	 
    /connection or /c   - Specifies the connection string
    /platform or /p     - Specifies the platform alias
    /environment or /e  - Specifies the environment name or prefix 
                          within a "database.wdi" file.
	
    If "/m" is not specified, Wizardby searches for the first MDL
    file in the current directory.
    
    If "/c" is not specified, connection string is built up using
    "database.wdi".
    
    If "/p" is not specified, platform alias is taken from
    "database.wdi".
    
    If "/e" is not specified, environment defaults to "development".
	
Commands:
    wizardby info [/c:&lt;connection-string&gt;]
        
        Displays information about current database schema version and all 
        registered migrations.
        
    wizardby upgrade [/m:&lt;mdl-file&gt;] [/c:&lt;connection-string&gt;]
        [/p:&lt;platform-alias&gt;] [/e:&lt;environment-name&gt;]
        
        Upgrades the database schema from the current version to
        the most recent one.
        
    wizardby downgrade [/m:&lt;mdl-file&gt;] [/c:&lt;connection-string&gt;]
        [/p:&lt;platform-alias&gt;] [/e:&lt;environment-name&gt;]
        
        Downgrades the database schema from the current version to
        version 0, effectively reverting all changes.
      
    wizardby migrate &lt;version&gt; [/m:&lt;mdl-file&gt;] [/c:&lt;connection-string&gt;]
        [/p:&lt;platform-alias&gt;] [/e:&lt;environment-name&gt;]
        
        Migrates the database schema to the given &lt;version&gt;.
        
    wizardby rollback [&lt;step&gt;] [/m:&lt;mdl-file&gt;] [/c:&lt;connection-string&gt;]
        [/p:&lt;platform-alias&gt;] [/e:&lt;environment-name&gt;]
        
        Rolls back at most "&lt;step&gt;" previous versions.
        
        If "&lt;step&gt;" is not specified, only the last version is 
        rolled back.
        
    wizardby redo [&lt;step&gt;] [/m:&lt;mdl-file&gt;] [/c:&lt;connection-string&gt;]
        [/p:&lt;platform-alias&gt;] [/e:&lt;environment-name&gt;]
        
        Rolls back "&lt;step&gt;" previous versions and then reapplies
        "&lt;step&gt;" following versions.
        
        If "&lt;step&gt;" is not specified, only the last version is redone.
        
Abbreviations:
    All commands and command-line keys can be abbreviated to the shortest
    unambiguous prefix. For example, "/connection" can be shortened 
    to just "/c"; "upgrade" can be abbreviated to "u". However,
    "rollback" cannot be shortened to "r" since this can be
    either "rollback" or "redo". Thus, "rollback" can be abbreviated
    to "ro" and "redo" - to "re".
    
    Environment name can also be abbreviated to the shortest
    unambiguous prefix. For example "/e:d" and "/e:development"
    refer to the same "development" environment provided there are
    no environments specified in the "database.wdi" with names
    starting with "d".</value>
  </data>
  <data name="WdiTemplate" xml:space="preserve">
    <value>deployment:
    environment development
        platform            =&gt; sqlserver
        host                =&gt; "(local)\sqlexpress"
        database            =&gt; {0}
        integrated-security =&gt; true
        
    environment staging
        platform            =&gt; sqlserver
        host                =&gt; "(local)\sqlexpress"
        database            =&gt; {0}_staging
        integrated-security =&gt; true
        
    environment production
        platform            =&gt; sqlserver
        host                =&gt; "(local)\sqlexpress"
        database            =&gt; {0}_production
        integrated-security =&gt; true</value>
  </data>
</root>